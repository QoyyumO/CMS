/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package cms;

import java.awt.Graphics2D;
import java.awt.List;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.print.Printable;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.PrintWriter;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ayomide
 */
public class TicketingDashboard extends javax.swing.JFrame {

    env envNew = new env();
    private BigDecimal runningTotal = BigDecimal.ZERO;
    private Map<String, BigDecimal> foodPrices = new HashMap<>();
    private final Timer refreshTimer;

    /**
     * Creates new form TicketingDashboard
     */
    public TicketingDashboard() {
        initComponents();
        jComboBox1.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent evt) {
                comboBoxItemStateChanged(evt);
            }
        });

        loadFoodItemsToComboBox(jComboBox1, jLabel8);

        // Initialize the timer with correct parameters
        refreshTimer = new Timer(10000, e -> loadFoodItemsToComboBox(jComboBox1, jLabel8));

        // Window listener to control timer
        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowOpened(WindowEvent e) {
                // Initial load
                loadFoodItemsToComboBox(jComboBox1, jLabel8);
                // Start periodic refresh
                refreshTimer.start();
            }

            @Override
            public void windowClosing(WindowEvent e) {
                refreshTimer.stop();
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(102, 255, 255));

        jLabel1.setFont(new java.awt.Font("Georgia Pro", 1, 24)); // NOI18N
        jLabel1.setText("Ticketing Dashboard");

        jLabel3.setFont(new java.awt.Font("Georgia Pro", 0, 14)); // NOI18N
        jLabel3.setText("jLabel3");

        jLabel2.setFont(new java.awt.Font("Georgia Pro", 1, 14)); // NOI18N
        jLabel2.setText("Hello");

        jLabel4.setFont(new java.awt.Font("Georgia Pro", 1, 14)); // NOI18N
        jLabel4.setText("Food Item");

        jComboBox1.setFont(new java.awt.Font("Georgia Pro", 0, 14)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Georgia Pro", 1, 14)); // NOI18N
        jLabel5.setText("Quantity");

        jTable1.setFont(new java.awt.Font("Georgia Pro", 0, 12)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Food Item", "Quantity", "price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton1.setFont(new java.awt.Font("Georgia Pro", 2, 14)); // NOI18N
        jButton1.setText("Order");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Georgia Pro", 2, 14)); // NOI18N
        jButton2.setText("Paid");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Georgia Pro", 2, 14)); // NOI18N
        jButton3.setText("Delete Selected Item");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTextField1.setText("jTextField1");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Georgia Pro", 0, 14)); // NOI18N
        jLabel6.setText("total");

        jLabel7.setFont(new java.awt.Font("Georgia Pro", 1, 14)); // NOI18N
        jLabel7.setText("Price");

        jLabel8.setFont(new java.awt.Font("Georgia Pro", 0, 14)); // NOI18N
        jLabel8.setText("jLabel8");

        jLabel9.setText("jLabel9");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(66, 66, 66)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(27, 27, 27)
                        .addComponent(jLabel3))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBox1, 0, 266, Short.MAX_VALUE))
                    .addComponent(jButton1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton3))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2))
                        .addGap(26, 26, 26)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8))
                        .addGap(22, 22, 22)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton2)
                    .addComponent(jButton1))
                .addGap(21, 21, 21))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void loadFoodItemsToComboBox(JComboBox<String> comboBox, JLabel priceLabel) {
        new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                try (Connection conn = DriverManager.getConnection(
                        "jdbc:mysql://localhost:3306/crm",
                        "root",
                        envNew.password); PreparedStatement pst = conn.prepareStatement(
                                "SELECT foodName, price FROM fooditems WHERE quantity > 0 ORDER BY foodName"); ResultSet rs = pst.executeQuery()) {

                    final DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
                    model.addElement("-- Select Food Item --");
                    final Map<String, BigDecimal> newFoodPrices = new HashMap<>();

                    while (rs.next()) {
                        String foodName = rs.getString("foodName");
                        BigDecimal price = rs.getBigDecimal("price");
                        model.addElement(foodName);
                        newFoodPrices.put(foodName, price);
                    }

                    SwingUtilities.invokeLater(() -> {
                        comboBox.setModel(model);
                        foodPrices.clear();
                        foodPrices.putAll(newFoodPrices);
                        priceLabel.setText(" ₦0.00");
                    });

                } catch (Exception ex) {
                    SwingUtilities.invokeLater(()
                            -> JOptionPane.showMessageDialog(null, "Error loading food items: " + ex.getMessage()));
                }
                return null;
            }
        }.execute();
    }

    private void comboBoxItemStateChanged(ItemEvent evt) {
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            Object selectedItem = jComboBox1.getSelectedItem();

            if (selectedItem == null || "-- Select Food Item --".equals(selectedItem.toString())) {
                jLabel8.setText("");
                return;
            }

            BigDecimal price = foodPrices.get(selectedItem.toString());
            jLabel8.setText(price != null ? String.format(" ₦%.2f", price) : "Price unavailable");
        }
    }

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try {
            // Get quantity as integer
            int quantity = Integer.parseInt(jTextField1.getText());
            String foodItem = (String) jComboBox1.getSelectedItem();

            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/crm", "root", envNew.password);

            // Get price from database
            PreparedStatement ps = con.prepareStatement("SELECT price, quantity FROM foodItems WHERE foodName = ?");
            ps.setString(1, foodItem);
            ResultSet rs = ps.executeQuery();

            if (rs.next()) {
                int availableQuantity = rs.getInt("quantity");

                if (quantity <= 0) {
                    JOptionPane.showMessageDialog(rootPane, "Please enter a positive quantity!");
                    return;
                }

                if (quantity > availableQuantity) {
                    JOptionPane.showMessageDialog(rootPane,
                            "Only " + availableQuantity + " items available!\n"
                            + "Please enter a quantity between 1 and " + availableQuantity);
                    return;
                }
                // Use BigDecimal for decimal values
                BigDecimal price = rs.getBigDecimal(1);
                // Calculate total
                BigDecimal total = price.multiply(new BigDecimal(quantity));

                runningTotal = runningTotal.add(total);

                // Create table row data
                String[] data = {
                    foodItem,
                    String.valueOf(quantity), // Format price with 2 decimals
                    total.setScale(2, RoundingMode.HALF_UP).toString() // Format total with 2 decimals
                };

                // Add row to table
                DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();
                tableModel.addRow(data);

                jLabel6.setText(runningTotal.toString());

            }

            // Close resources
            rs.close();
            ps.close();
            con.close();

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(rootPane, "Please enter a valid quantity number!");
        } catch (Exception e) {
            System.out.println(e);
            JOptionPane.showMessageDialog(rootPane, "Error occurred: " + e.getMessage());
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        try {
            // 1. Generate order ID
            String orderId = generateOrderId();

            // Get customer email (you'll need to have this from your UI)
            String email = jLabel9.getText().trim(); // Assuming you have an email field

            // 2. Insert into orders table
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/crm", "root", envNew.password);

            // Start transaction
            con.setAutoCommit(false);

            try {
                // Insert order
                PreparedStatement orderStmt = con.prepareStatement(
                        "INSERT INTO orders (orderId, ticketers_email, totalCost, status) VALUES (?, ?, ?, 0)");
                orderStmt.setString(1, orderId);
                orderStmt.setString(2, email);
                orderStmt.setBigDecimal(3, runningTotal);
                orderStmt.executeUpdate();
                // 3. Insert all order items
                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                PreparedStatement itemStmt = con.prepareStatement(
                        "INSERT INTO orderitems (orderId, foodName, quantity, subPrice) VALUES (?, ?, ?, ?)");

                StringBuilder receipt = new StringBuilder();
                receipt.append("=========== RECEIPT ===========\n");
                receipt.append("Order ID: ").append(orderId).append("\n");
                receipt.append("------------------------------\n");
                receipt.append(String.format("%-20s %-10s %-10s\n", "Item", "Qty", "Price"));
                BigDecimal total = BigDecimal.ZERO;

                for (int i = 0; i < model.getRowCount(); i++) {
                    String foodName = (String) model.getValueAt(i, 0);
                    // Handle quantity (may be String or Number)
                    int quantity;
                    Object qtyValue = model.getValueAt(i, 1);
                    if (qtyValue instanceof Number number) {
                        quantity = number.intValue();
                    } else {
                        quantity = Integer.parseInt(qtyValue.toString());
                    }

                    // Handle subPrice (String to BigDecimal conversion)
                    BigDecimal subPrice;
                    Object priceValue = model.getValueAt(i, 2);
                    switch (priceValue) {
                        case BigDecimal bigDecimal ->
                            subPrice = bigDecimal;
                        case Number number ->
                            subPrice = BigDecimal.valueOf(number.doubleValue());
                        default -> // Safest way to convert String to BigDecimal
                            subPrice = new BigDecimal(priceValue.toString().replaceAll("[^\\d.]", ""));
                    }

                    total = total.add(subPrice);

                    receipt.append(String.format("%-20s %-10d %-10.2f\n", foodName, quantity, subPrice));

                    itemStmt.setString(1, orderId);
                    itemStmt.setString(2, foodName);
                    itemStmt.setInt(3, quantity);
                    itemStmt.setBigDecimal(4, subPrice);
                    itemStmt.addBatch();

                    // Update available quantity in fooditems
                    PreparedStatement updateStmt = con.prepareStatement(
                            "UPDATE fooditems SET quantity = quantity - ? WHERE foodName = ?");
                    updateStmt.setInt(1, quantity);
                    updateStmt.setString(2, foodName);
                    updateStmt.executeUpdate();
                }
                receipt.append("------------------------------\n");
                receipt.append(String.format("TOTAL: %.2f\n", total));
                receipt.append("==============================");

                // Print receipt (simple console print or hook into printer)
                System.out.println(receipt.toString());

                PrinterJob job = PrinterJob.getPrinterJob();
                job.setPrintable((graphics, pageFormat, pageIndex) -> {
                    if (pageIndex > 0) {
                        return Printable.NO_SUCH_PAGE;
                    }

                    Graphics2D g2d = (Graphics2D) graphics;
                    g2d.translate(pageFormat.getImageableX(), pageFormat.getImageableY());

                    int y = 20;
                    for (String line : receipt.toString().split("\n")) {
                        g2d.drawString(line, 10, y);
                        y += 15;
                    }

                    return Printable.PAGE_EXISTS;
                });

                if (job.printDialog()) {
                    try {
                        job.print();
                    } catch (PrinterException pe) {
                        pe.printStackTrace();
                    }
                }
                itemStmt.executeBatch();
                con.commit();

                JOptionPane.showMessageDialog(this, "Order placed successfully!\nOrder ID: " + orderId);

                // Clear the table and reset total
                model.setRowCount(0);
                runningTotal = BigDecimal.ZERO;
                jLabel6.setText("0.00");
            } catch (Exception e) {
                // Rollback on error
                System.out.println(e);
                con.rollback();
                throw e;
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        int selectedRow = jTable1.getSelectedRow();

        // Validate selection
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this,
                    "Please select a row to remove",
                    "No Selection",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            // Get the subPrice value from column 2 (index 2)
            Object priceValue = model.getValueAt(selectedRow, 2);
            BigDecimal subPrice;

            // Convert to BigDecimal using your existing logic
            switch (priceValue) {
                case BigDecimal bigDecimal ->
                    subPrice = bigDecimal;
                case Number number ->
                    subPrice = BigDecimal.valueOf(number.doubleValue());
                default -> // Safest way to convert String to BigDecimal
                    subPrice = new BigDecimal(priceValue.toString().replaceAll("[^\\d.]", ""));
            }

            // Subtract from running total
            runningTotal = runningTotal.subtract(subPrice);

            // Update display (assuming you have a label for the total)
            jLabel6.setText(runningTotal.setScale(2, RoundingMode.HALF_UP).toString());

            // Remove the row
            model.removeRow(selectedRow);

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this,
                    "Error removing row: " + ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_jButton3ActionPerformed
    public void setUserName(String userName) {
        jLabel3.setText(userName);
    }

    public void setEmail(String email) {
        jLabel9.setText(email);
    }

    private String generateOrderId() throws Exception {
        // Format: DDMMYY + 4-digit sequence (e.g., 1705250001)
        SimpleDateFormat dateFormat = new SimpleDateFormat("ddMMyy");
        String datePart = dateFormat.format(new Date());

        // Get the next sequence number for today
        Connection con = null;
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/crm", "root", envNew.password);

            // Check the highest order number for today
            PreparedStatement ps = con.prepareStatement(
                    "SELECT MAX(orderId) FROM orders WHERE orderId LIKE ?");
            ps.setString(1, datePart + "%");
            ResultSet rs = ps.executeQuery();

            int nextSeq = 1; // Default to 0001 if no orders today

            if (rs.next()) {
                String lastOrderId = rs.getString(1);
                if (lastOrderId != null && lastOrderId.startsWith(datePart)) {
                    int lastSeq = Integer.parseInt(lastOrderId.substring(6));
                    nextSeq = lastSeq + 1;
                }
            }

            return datePart + String.format("%04d", nextSeq);

        } finally {
            if (con != null) {
                con.close();
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TicketingDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TicketingDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TicketingDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TicketingDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TicketingDashboard().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
