/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package cms;

import com.toedter.calendar.JDateChooser;
import java.awt.GridLayout;
import java.io.File;
import java.io.PrintWriter;
import java.security.Timestamp;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.Timer;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.time.LocalDate;
import java.util.HashSet;
import java.util.Set;
import javax.swing.JFileChooser;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ayomide
 */
public class HOUDashboard extends javax.swing.JFrame {

    env envNew = new env();
    private final Timer refreshTimer;
    private Set<String> lowStockAlertedItems = new HashSet<>();

    /**
     * Creates new form HOUDashboard
     */
    public HOUDashboard() {
        initComponents();
        refreshTimer = new Timer(1000, e -> {
            loadDailyRealTimeKitchenUpdates();
            loadDailyRealTimePayments();
            loadDailyRealTimeOrders();
            loadDailyRealTimeServingSatus();
            loadDailyRealTimeUserActivities();
            loadPopularFoodItems();
            checkLowStockItems();
        });
        refreshTimer.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void loadDailyRealTimeKitchenUpdates() {
        DefaultTableModel model = (DefaultTableModel) jTable4.getModel();
        model.setRowCount(0); // Clear existing data

        try (Connection conn = DriverManager.getConnection(
                "jdbc:mysql://localhost:3306/crm",
                "root",
                envNew.password); PreparedStatement pst = conn.prepareStatement(
                        "SELECT k.foodName, k.quantity, k.added_at, k.email "
                        + "FROM kitchenupdates k "
                        + "JOIN fooditems f ON k.foodName = f.foodName "
                        + "WHERE DATE(k.added_at) = CURRENT_DATE "
                        + "ORDER BY k.added_at"
                )) {

            ResultSet rs = pst.executeQuery();
            String[] columnNames = {"Food Name", "Quantity", "Time Added", "Email"};
            model.setColumnIdentifiers(columnNames);
            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getString("foodName"),
                    rs.getInt("quantity"),
                    rs.getTimestamp("added_at"),
                    rs.getString("email"),});
            }

            rs.close();
            pst.close();
            conn.close();
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error loading real time daily kitchen updates: " + ex.getMessage());
        }
    }

    private void loadDailyRealTimePayments() {
        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
        model.setRowCount(0); // Clear existing data

        try (Connection conn = DriverManager.getConnection(
                "jdbc:mysql://localhost:3306/crm",
                "root",
                envNew.password); PreparedStatement pst = conn.prepareStatement(
                        "SELECT orderId, totalCost, created_at, ticketers_email "
                        + "FROM orders "
                        + "WHERE DATE(created_at) = CURRENT_DATE "
                        + "ORDER BY created_at")) {

            ResultSet rs = pst.executeQuery();
            String[] columnNames = {"Order ID", "Total Amount Paid", "Time Paid", "Ticketer's Email"};
            model.setColumnIdentifiers(columnNames);
            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getString("orderId"),
                    rs.getBigDecimal("totalCost"),
                    rs.getTimestamp("created_at"),
                    rs.getString("ticketers_email"),});
            }

            rs.close();
            pst.close();
            conn.close();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error loading real time daily payments: " + ex.getMessage());
        }
    }

    private void loadDailyRealTimeOrders() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0); // Clear existing data

        try (Connection conn = DriverManager.getConnection(
                "jdbc:mysql://localhost:3306/crm",
                "root",
                envNew.password); PreparedStatement pst = conn.prepareStatement(
                        "SELECT foodName, quantity, ordered_at "
                        + "FROM orderitems "
                        + "WHERE DATE(ordered_at) = CURRENT_DATE "
                        + "ORDER BY ordered_at")) {

            ResultSet rs = pst.executeQuery();
            String[] columnNames = {"Food Name", "Quantity", "Ordered Time"};
            model.setColumnIdentifiers(columnNames);
            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getString("foodName"),
                    rs.getInt("quantity"),
                    rs.getTimestamp("ordered_at"),});
            }

            rs.close();
            pst.close();
            conn.close();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error loading real time daily orders: " + ex.getMessage());
        }
    }

    private void loadDailyRealTimeServingSatus() {
        DefaultTableModel model = (DefaultTableModel) jTable3.getModel();
        model.setRowCount(0); // Clear existing data

        try (Connection conn = DriverManager.getConnection(
                "jdbc:mysql://localhost:3306/crm",
                "root",
                envNew.password); PreparedStatement pst = conn.prepareStatement(
                        "SELECT orderId, status, created_at, served_at,servers_email "
                        + "FROM orders "
                        + "WHERE DATE(created_at) = CURRENT_DATE "
                        + "ORDER BY created_at")) {

            ResultSet rs = pst.executeQuery();
            String[] columnNames = {"Order ID", "Satus", "Time Served", "Server's Email"};
            model.setColumnIdentifiers(columnNames);
            while (rs.next()) {
                String statusDisplay = rs.getBoolean("status") ? "Served" : "Not Served";
                model.addRow(new Object[]{
                    rs.getString("orderId"),
                    statusDisplay,
                    rs.getTimestamp("served_at"),
                    rs.getString("servers_email"),});
            }

            rs.close();
            pst.close();
            conn.close();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error loading real time daily serving status: " + ex.getMessage());
        }
    }

    private void loadDailyRealTimeUserActivities() {
        DefaultTableModel model = (DefaultTableModel) jTable5.getModel();
        model.setRowCount(0); // Clear existing data

        // Set column headers
        String[] columnNames = {"User Email", "Activity Type", "Details", "Time"};
        model.setColumnIdentifiers(columnNames);

        try (Connection conn = DriverManager.getConnection(
                "jdbc:mysql://localhost:3306/crm",
                "root",
                envNew.password)) {

            // Get today's date in YYYY-MM-DD format
            String today = LocalDate.now().toString();

            // 1. Get order creators (ticketers)
            String ticketersQuery = "SELECT orderId, ticketers_email, created_at FROM orders "
                    + "WHERE DATE(created_at) = ?";
            try (PreparedStatement pst = conn.prepareStatement(ticketersQuery)) {
                pst.setString(1, today);
                ResultSet rs = pst.executeQuery();
                while (rs.next()) {
                    model.addRow(new Object[]{
                        rs.getString("ticketers_email"),
                        "Created Order",
                        "Order ID: " + rs.getString("orderId"),
                        rs.getTimestamp("created_at")
                    });
                }
            }

            // 2. Get order servers
            String serversQuery = "SELECT orderId, servers_email, served_at FROM orders "
                    + "WHERE DATE(served_at) = ? AND servers_email IS NOT NULL";
            try (PreparedStatement pst = conn.prepareStatement(serversQuery)) {
                pst.setString(1, today);
                ResultSet rs = pst.executeQuery();
                while (rs.next()) {
                    model.addRow(new Object[]{
                        rs.getString("servers_email"),
                        "Served Order",
                        "Order ID: " + rs.getString("orderId"),
                        rs.getTimestamp("served_at")
                    });
                }
            }

            // 3. Get kitchen updates
            String kitchenQuery = "SELECT k.foodName, k.quantity, k.added_at, k.email, f.price "
                    + "FROM kitchenupdates k JOIN fooditems f ON k.foodName = f.foodName "
                    + "WHERE DATE(k.added_at) = ?";
            try (PreparedStatement pst = conn.prepareStatement(kitchenQuery)) {
                pst.setString(1, today);
                ResultSet rs = pst.executeQuery();
                while (rs.next()) {
                    model.addRow(new Object[]{
                        rs.getString("email"),
                        "Kitchen Update",
                        String.format("Updated %s by %d (Price: $%.2f)",
                        rs.getString("foodName"),
                        rs.getInt("quantity"),
                        rs.getBigDecimal("price")),
                        rs.getTimestamp("added_at")
                    });
                }
            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this,
                    "Error loading user activities: " + ex.getMessage(),
                    "Database Error",
                    JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }

    private void loadPopularFoodItems() {
        DefaultTableModel model = (DefaultTableModel) jTable6.getModel();
        model.setRowCount(0); // Clear existing data

        // Set column headers
        String[] columnNames = {"Food Name", "Total Orders", "Total Quantity", "Total Revenue"};
        model.setColumnIdentifiers(columnNames);

        try (Connection conn = DriverManager.getConnection(
                "jdbc:mysql://localhost:3306/crm",
                "root",
                envNew.password); PreparedStatement pst = conn.prepareStatement(
                        "SELECT oi.foodName, "
                        + "COUNT(DISTINCT oi.orderId) as totalOrders, "
                        + "SUM(oi.quantity) as totalQuantity, "
                        + "SUM(oi.subPrice) as totalRevenue "
                        + "FROM orderitems oi "
                        + "JOIN fooditems f ON oi.foodName = f.foodName "
                        + "GROUP BY oi.foodName "
                        + "ORDER BY totalQuantity DESC")) {

            ResultSet rs = pst.executeQuery();

            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getString("foodName"),
                    rs.getInt("totalOrders"),
                    rs.getInt("totalQuantity"),
                    "₦" + String.format("%,.2f", rs.getBigDecimal("totalRevenue"))
                });
            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this,
                    "Error loading food analysis: " + ex.getMessage(),
                    "Database Error",
                    JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }

    private void checkLowStockItems() {
        try (Connection conn = DriverManager.getConnection(
                "jdbc:mysql://localhost:3306/crm",
                "root",
                envNew.password); PreparedStatement pst = conn.prepareStatement(
                        "SELECT foodName, quantity FROM fooditems "
                        + "WHERE quantity BETWEEN 1 AND 5")) {

            ResultSet rs = pst.executeQuery();
            Set<String> currentLowStockItems = new HashSet<>();
            StringBuilder alertMessage = new StringBuilder();

            // Check current low stock items
            while (rs.next()) {
                String foodName = rs.getString("foodName");
                int quantity = rs.getInt("quantity");
                currentLowStockItems.add(foodName);

                // If this is a new low stock item, add to alert
                if (!lowStockAlertedItems.contains(foodName)) {
                    alertMessage.append(String.format("- %s (Remaining: %d)%n", foodName, quantity));
                }
            }

            // Show alert if there are new low stock items
            if (alertMessage.length() > 0) {
                SwingUtilities.invokeLater(() -> {
                    JOptionPane.showMessageDialog(
                            this,
                            "Low Stock Alert:\n" + alertMessage.toString(),
                            "Inventory Warning",
                            JOptionPane.WARNING_MESSAGE
                    );
                });
            }

            // Update our tracking set
            lowStockAlertedItems = currentLowStockItems;

        } catch (Exception ex) {
            System.err.println("Error checking low stock: " + ex.getMessage());
        }
    }

    private void loadDailyServingStatus(String date) {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Specify where to save the CSV file");
        fileChooser.setSelectedFile(new File("serving_status_" + date + ".csv"));

        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            File csvFile = fileChooser.getSelectedFile();

            try (Connection conn = DriverManager.getConnection(
                    "jdbc:mysql://localhost:3306/crm",
                    "root",
                    envNew.password); PreparedStatement pst = conn.prepareStatement(
                            "SELECT orderId, status, created_at, served_at,servers_email "
                            + "FROM orders "
                            + "WHERE DATE(created_at) = ? "
                            + "ORDER BY created_at"); PrintWriter writer = new PrintWriter(csvFile)) {

                pst.setString(1, date);
                ResultSet rs = pst.executeQuery();

                // Write CSV header
                writer.println("Order ID, Satus, Time Served, Server's Email");

                // Write data rows
                while (rs.next()) {
                    String statusDisplay = rs.getBoolean("status") ? "Served" : "Not Served";
                    String foodName = escapeCsv(rs.getString("orderId"));
                    String status = statusDisplay;
                    // Handle null served_at
                    java.sql.Timestamp servedAtTimestamp = rs.getTimestamp("served_at");
                    String servedAt = servedAtTimestamp == null ? "" : escapeCsv(servedAtTimestamp.toString());
                    String email = escapeCsv(rs.getString("servers_email"));

                    writer.println(String.join(",",
                            foodName,
                            status,
                            servedAt,
                            email));
                }

                JOptionPane.showMessageDialog(this,
                        "Data successfully exported to:\n" + csvFile.getAbsolutePath(),
                        "Export Complete",
                        JOptionPane.INFORMATION_MESSAGE);

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this,
                        "Error exporting data: " + ex.getMessage(),
                        "Export Error",
                        JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
            }
        }
    }

    private void loadRangeServingStatus(String startDate, String endDate) {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Save Kitchen Range Report");
        fileChooser.setSelectedFile(new File(String.format("serving_report_%s_to_%s.csv", startDate, endDate)));

        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            File csvFile = fileChooser.getSelectedFile();

            try (Connection conn = DriverManager.getConnection(
                    "jdbc:mysql://localhost:3306/crm",
                    "root",
                    envNew.password); PreparedStatement pst = conn.prepareStatement(
                            "SELECT orderId, status, created_at, served_at,servers_email "
                            + "FROM orders  "
                            + "WHERE DATE(created_at) BETWEEN ? AND ? "
                            + "ORDER BY created_at"); PrintWriter writer = new PrintWriter(csvFile)) {

                pst.setString(1, startDate);
                pst.setString(2, endDate);
                ResultSet rs = pst.executeQuery();

                // Write CSV header
                writer.println("Order ID, Satus, Time Served, Server's Email");

                // Write data rows
                while (rs.next()) {
                    String statusDisplay = rs.getBoolean("status") ? "Served" : "Not Served";
                    String foodName = escapeCsv(rs.getString("orderId"));
                    String status = statusDisplay;
                    // Handle null served_at
                    java.sql.Timestamp servedAtTimestamp = rs.getTimestamp("served_at");
                    String servedAt = servedAtTimestamp == null ? "" : escapeCsv(servedAtTimestamp.toString());
                    String email = escapeCsv(rs.getString("servers_email"));

                    writer.println(String.join(",",
                            foodName,
                            status,
                            servedAt,
                            email));
                }

                JOptionPane.showMessageDialog(this,
                        String.format("Report exported successfully for %s to %s\nSaved to: %s",
                                startDate, endDate, csvFile.getAbsolutePath()),
                        "Export Complete",
                        JOptionPane.INFORMATION_MESSAGE);

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this,
                        "Error exporting report: " + ex.getMessage(),
                        "Export Error",
                        JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
            }
        }
    }

    private void loadDailyPayments(String date) {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Save Daily Payments Report");
        fileChooser.setSelectedFile(new File("daily_payments_" + date + ".csv"));

        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            File csvFile = fileChooser.getSelectedFile();

            try (Connection conn = DriverManager.getConnection(
                    "jdbc:mysql://localhost:3306/crm",
                    "root",
                    envNew.password); PreparedStatement pst = conn.prepareStatement(
                            "SELECT orderId, totalCost, created_at, ticketers_email "
                            + "FROM orders "
                            + "WHERE DATE(created_at) = ? "
                            + "ORDER BY created_at"); PrintWriter writer = new PrintWriter(csvFile)) {

                pst.setString(1, date);
                ResultSet rs = pst.executeQuery();

                // Write CSV header
                writer.println("Order ID,Total Amount Paid,Time Paid,Ticketer's Email");

                // Write data rows
                while (rs.next()) {
                    writer.println(String.join(",",
                            String.valueOf(rs.getString("orderId")),
                            escapeCsv(rs.getBigDecimal("totalCost").toString()),
                            escapeCsv(rs.getTimestamp("created_at").toString()),
                            escapeCsv(rs.getString("ticketers_email"))
                    ));
                }

                JOptionPane.showMessageDialog(this,
                        "Daily payments exported to:\n" + csvFile.getAbsolutePath(),
                        "Export Complete",
                        JOptionPane.INFORMATION_MESSAGE);

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this,
                        "Error exporting daily payments: " + ex.getMessage(),
                        "Export Error",
                        JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
            }
        }
    }

    private void loadRangePayments(String startDate, String endDate) {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Save Payments Range Report");
        fileChooser.setSelectedFile(new File(
                String.format("payments_report_%s_to_%s.csv", startDate, endDate)));

        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            File csvFile = fileChooser.getSelectedFile();

            try (Connection conn = DriverManager.getConnection(
                    "jdbc:mysql://localhost:3306/crm",
                    "root",
                    envNew.password); PreparedStatement pst = conn.prepareStatement(
                            "SELECT orderId, totalCost, created_at, ticketers_email "
                            + "FROM orders "
                            + "WHERE DATE(created_at) BETWEEN ? AND ? "
                            + "ORDER BY created_at"); PrintWriter writer = new PrintWriter(csvFile)) {

                pst.setString(1, startDate);
                pst.setString(2, endDate);
                ResultSet rs = pst.executeQuery();

                // Write CSV header
                writer.println("Order ID,Total Amount Paid,Time Paid,Ticketer's Email");

                // Write data rows
                while (rs.next()) {
                    writer.println(String.join(",",
                            String.valueOf(rs.getString("orderId")),
                            escapeCsv(rs.getBigDecimal("totalCost").toString()),
                            escapeCsv(rs.getTimestamp("created_at").toString()),
                            escapeCsv(rs.getString("ticketers_email"))
                    ));
                }

                JOptionPane.showMessageDialog(this,
                        String.format("Payments report exported for %s to %s\nSaved to: %s",
                                startDate, endDate, csvFile.getAbsolutePath()),
                        "Export Complete",
                        JOptionPane.INFORMATION_MESSAGE);

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this,
                        "Error exporting payments report: " + ex.getMessage(),
                        "Export Error",
                        JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
            }
        }
    }

    private void loadDailyOrders(String date) {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Specify where to save the CSV file");
        fileChooser.setSelectedFile(new File("daily_orders_" + date + ".csv"));

        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            File csvFile = fileChooser.getSelectedFile();

            try (Connection conn = DriverManager.getConnection(
                    "jdbc:mysql://localhost:3306/crm",
                    "root",
                    envNew.password); PreparedStatement pst = conn.prepareStatement(
                            "SELECT foodName, quantity, ordered_at "
                            + "FROM orderitems "
                            + "WHERE DATE(ordered_at) = ? "
                            + "ORDER BY ordered_at"); PrintWriter writer = new PrintWriter(csvFile)) {
                pst.setString(1, date);
                ResultSet rs = pst.executeQuery();

                // Write CSV header
                writer.println("Food Name,Quantity,Time Ordered");

                // Write data rows
                while (rs.next()) {
                    String foodName = escapeCsv(rs.getString("foodName"));
                    String quantity = String.valueOf(rs.getInt("quantity"));
                    String orderedAt = escapeCsv(rs.getTimestamp("ordered_at").toString());

                    writer.println(String.join(",",
                            foodName,
                            quantity,
                            orderedAt));
                }

                JOptionPane.showMessageDialog(this,
                        "Data successfully exported to:\n" + csvFile.getAbsolutePath(),
                        "Export Complete",
                        JOptionPane.INFORMATION_MESSAGE);

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this,
                        "Error exporting data: " + ex.getMessage(),
                        "Export Error",
                        JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
            }
        }
    }

    private void loadRangeOrders(String startDate, String endDate) {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Save Payments Range Report");
        fileChooser.setSelectedFile(new File(
                String.format("orders_report_%s_to_%s.csv", startDate, endDate)));

        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            File csvFile = fileChooser.getSelectedFile();

            try (Connection conn = DriverManager.getConnection(
                    "jdbc:mysql://localhost:3306/crm",
                    "root",
                    envNew.password); PreparedStatement pst = conn.prepareStatement(
                            "SELECT foodName, quantity, ordered_at "
                            + "FROM orderitems "
                            + "WHERE DATE(ordered_at) BETWEEN ? AND ? "
                            + "ORDER BY ordered_at"); PrintWriter writer = new PrintWriter(csvFile)) {

                pst.setString(1, startDate);
                pst.setString(2, endDate);
                ResultSet rs = pst.executeQuery();

                // Write CSV header
                writer.println("Food Name,Quantity,Time Ordered");

                // Write data rows
                while (rs.next()) {
                    writer.println(String.join(",",
                            escapeCsv(rs.getString("foodName")),
                            String.valueOf(rs.getInt("quantity")),
                            escapeCsv(rs.getTimestamp("ordered_at").toString())
                    ));
                }

                JOptionPane.showMessageDialog(this,
                        String.format("Payments report exported for %s to %s\nSaved to: %s",
                                startDate, endDate, csvFile.getAbsolutePath()),
                        "Export Complete",
                        JOptionPane.INFORMATION_MESSAGE);

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this,
                        "Error exporting payments report: " + ex.getMessage(),
                        "Export Error",
                        JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
            }
        }
    }

    //CSV escape method
    private String escapeCsv(String input) {
        if (input == null) {
            return "";
        }
        if (input.contains("\"") || input.contains(",") || input.contains("\n")) {
            return "\"" + input.replace("\"", "\"\"") + "\"";
        }
        return input;
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable5 = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTable6 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Georgia Pro", 1, 24)); // NOI18N
        jLabel1.setText("H of U Dashboard");

        jLabel2.setFont(new java.awt.Font("Georgia Pro", 1, 14)); // NOI18N
        jLabel2.setText("Hello");

        jLabel3.setFont(new java.awt.Font("Georgia Pro", 0, 14)); // NOI18N
        jLabel3.setText("jLabel3");

        jTable1.setFont(new java.awt.Font("Georgia Pro", 0, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Food Name", "Quantity", "Time Ordered"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton1.setFont(new java.awt.Font("Georgia Pro", 2, 14)); // NOI18N
        jButton1.setText("Daily Report");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Georgia Pro", 2, 14)); // NOI18N
        jButton3.setText("Range Report");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton3))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 595, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 464, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton3))
                .addGap(15, 15, 15))
        );

        jTabbedPane1.addTab("Orders", jPanel2);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Order ID", "Total Amout Paid", "Time Paid", "Ticketer's Email"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable2);

        jButton4.setFont(new java.awt.Font("Georgia Pro", 2, 14)); // NOI18N
        jButton4.setText("Daily Report");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setFont(new java.awt.Font("Georgia Pro", 2, 14)); // NOI18N
        jButton5.setText("Range Report");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 589, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton5)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 461, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton5, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jButton4)
                        .addContainerGap())))
        );

        jTabbedPane1.addTab("Payments", jPanel3);

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Order ID", "Status", "Time Served", "Sever's Email"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTable3);

        jButton7.setFont(new java.awt.Font("Georgia Pro", 2, 14)); // NOI18N
        jButton7.setText("Daily Report");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setFont(new java.awt.Font("Georgia Pro", 2, 14)); // NOI18N
        jButton8.setText("Range Report");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 589, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jButton7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton8)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 455, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton7)
                    .addComponent(jButton8))
                .addGap(24, 24, 24))
        );

        jTabbedPane1.addTab("Serving Statuses", jPanel4);

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Food Name", "Quantity", "Time Added", "Email"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(jTable4);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 601, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 503, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Food Preparation", jPanel5);

        jTable5.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Users Email", "Activity Type", "Details", "Time"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(jTable5);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 589, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 455, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 60, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("User Activities", jPanel6);

        jTable6.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Food Name", "Total Orders", "Total Quantity", "Total Revenue"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane6.setViewportView(jTable6);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 589, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 503, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Popular Food Item", jPanel7);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(72, 72, 72)
                                .addComponent(jLabel1))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel2)
                                .addGap(27, 27, 27)
                                .addComponent(jLabel3)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jTabbedPane1)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        JDateChooser dateChooser = new JDateChooser();
        dateChooser.setDateFormatString("yyyy-MM-dd");

        JPanel panel = new JPanel();
        panel.add(new JLabel("Select Date:"));
        panel.add(dateChooser);

        int result = JOptionPane.showConfirmDialog(
                this,
                panel,
                "Select Date for Daily Report",
                JOptionPane.OK_CANCEL_OPTION,
                JOptionPane.PLAIN_MESSAGE
        );

        if (result == JOptionPane.OK_OPTION) {
            Date selectedDate = dateChooser.getDate();
            if (selectedDate != null) {
                // Format the date for SQL query
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                String dateString = sdf.format(selectedDate);

                // Query database for records from this date
                loadDailyPayments(dateString);
            }
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        // Create date pickers
        JDateChooser startDateChooser = new JDateChooser();
        JDateChooser endDateChooser = new JDateChooser();
        startDateChooser.setDateFormatString("yyyy-MM-dd");
        endDateChooser.setDateFormatString("yyyy-MM-dd");

        // Set default dates (e.g., current week)
        Calendar cal = Calendar.getInstance();
        endDateChooser.setDate(cal.getTime()); // Today as end date
        cal.add(Calendar.DAY_OF_MONTH, -7); // One week back
        startDateChooser.setDate(cal.getTime());

        JPanel panel = new JPanel(new GridLayout(2, 2));
        panel.add(new JLabel("Start Date:"));
        panel.add(startDateChooser);
        panel.add(new JLabel("End Date:"));
        panel.add(endDateChooser);

        int result = JOptionPane.showConfirmDialog(
                this,
                panel,
                "Select Date Range for Report",
                JOptionPane.OK_CANCEL_OPTION,
                JOptionPane.PLAIN_MESSAGE
        );

        if (result == JOptionPane.OK_OPTION) {
            Date startDate = startDateChooser.getDate();
            Date endDate = endDateChooser.getDate();

            if (startDate != null && endDate != null) {
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                loadRangePayments(
                        sdf.format(startDate),
                        sdf.format(endDate)
                );
            }
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        JDateChooser dateChooser = new JDateChooser();
        dateChooser.setDateFormatString("yyyy-MM-dd");

        JPanel panel = new JPanel();
        panel.add(new JLabel("Select Date:"));
        panel.add(dateChooser);

        int result = JOptionPane.showConfirmDialog(
                this,
                panel,
                "Select Date for Daily Report",
                JOptionPane.OK_CANCEL_OPTION,
                JOptionPane.PLAIN_MESSAGE
        );

        if (result == JOptionPane.OK_OPTION) {
            Date selectedDate = dateChooser.getDate();
            if (selectedDate != null) {
                // Format the date for SQL query
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                String dateString = sdf.format(selectedDate);

                // Query database for records from this date
                loadDailyOrders(dateString);
            }
        }


    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        // Create date pickers
        JDateChooser startDateChooser = new JDateChooser();
        JDateChooser endDateChooser = new JDateChooser();
        startDateChooser.setDateFormatString("yyyy-MM-dd");
        endDateChooser.setDateFormatString("yyyy-MM-dd");

        // Set default dates (e.g., current week)
        Calendar cal = Calendar.getInstance();
        endDateChooser.setDate(cal.getTime()); // Today as end date
        cal.add(Calendar.DAY_OF_MONTH, -7); // One week back
        startDateChooser.setDate(cal.getTime());

        JPanel panel = new JPanel(new GridLayout(2, 2));
        panel.add(new JLabel("Start Date:"));
        panel.add(startDateChooser);
        panel.add(new JLabel("End Date:"));
        panel.add(endDateChooser);

        int result = JOptionPane.showConfirmDialog(
                this,
                panel,
                "Select Date Range for Report",
                JOptionPane.OK_CANCEL_OPTION,
                JOptionPane.PLAIN_MESSAGE
        );

        if (result == JOptionPane.OK_OPTION) {
            Date startDate = startDateChooser.getDate();
            Date endDate = endDateChooser.getDate();

            if (startDate != null && endDate != null) {
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                loadRangeOrders(
                        sdf.format(startDate),
                        sdf.format(endDate)
                );
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        // Create date pickers
        JDateChooser startDateChooser = new JDateChooser();
        JDateChooser endDateChooser = new JDateChooser();
        startDateChooser.setDateFormatString("yyyy-MM-dd");
        endDateChooser.setDateFormatString("yyyy-MM-dd");

        // Set default dates (e.g., current week)
        Calendar cal = Calendar.getInstance();
        endDateChooser.setDate(cal.getTime()); // Today as end date
        cal.add(Calendar.DAY_OF_MONTH, -7); // One week back
        startDateChooser.setDate(cal.getTime());

        JPanel panel = new JPanel(new GridLayout(2, 2));
        panel.add(new JLabel("Start Date:"));
        panel.add(startDateChooser);
        panel.add(new JLabel("End Date:"));
        panel.add(endDateChooser);

        int result = JOptionPane.showConfirmDialog(
                this,
                panel,
                "Select Date Range for Report",
                JOptionPane.OK_CANCEL_OPTION,
                JOptionPane.PLAIN_MESSAGE
        );

        if (result == JOptionPane.OK_OPTION) {
            Date startDate = startDateChooser.getDate();
            Date endDate = endDateChooser.getDate();

            if (startDate != null && endDate != null) {
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                loadRangeServingStatus(
                        sdf.format(startDate),
                        sdf.format(endDate)
                );
            }
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        JDateChooser dateChooser = new JDateChooser();
        dateChooser.setDateFormatString("yyyy-MM-dd");

        JPanel panel = new JPanel();
        panel.add(new JLabel("Select Date:"));
        panel.add(dateChooser);

        int result = JOptionPane.showConfirmDialog(
                this,
                panel,
                "Select Date for Daily Report",
                JOptionPane.OK_CANCEL_OPTION,
                JOptionPane.PLAIN_MESSAGE
        );

        if (result == JOptionPane.OK_OPTION) {
            Date selectedDate = dateChooser.getDate();
            if (selectedDate != null) {
                // Format the date for SQL query
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                String dateString = sdf.format(selectedDate);

                // Query database for records from this date
                loadDailyServingStatus(dateString);
            }
        }
    }//GEN-LAST:event_jButton7ActionPerformed
    public void setUserName(String userName) {
        jLabel3.setText(userName);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HOUDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HOUDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HOUDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HOUDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HOUDashboard().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    private javax.swing.JTable jTable5;
    private javax.swing.JTable jTable6;
    // End of variables declaration//GEN-END:variables
}
